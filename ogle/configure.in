dnl Process this file with autoconf to produce a configure script.
AC_INIT(ac3/ac3dec_wrap.c)
AM_INIT_AUTOMAKE(ogle, 0.9.2-cvs)
dnl AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CANONICAL_HOST
dnl check CFLAGS before AC_PROG_CC is run because it sets CFLAGS if not set
USER_CFLAGS="$CFLAGS"
dnl Checks for programs.
AC_PROG_CC
dnl AM_DISABLE_SHARED
AM_PROG_LIBTOOL
dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
AC_C_ALWAYS_INLINE
AC_CHECK_GENERATE_INTTYPES([include])

MANDATORY_MISSING_LIBS=""

dnl Checks for header files.
AC_CHECK_HEADERS([byteswap.h sys/bswap.h sys/endian.h sys/param.h stropts.h])
AC_CHECK_HEADERS([poll.h sys/poll.h sys/select.h])
AC_CHECK_FUNCS(poll)


dnl ---------------------------------------------------------
dnl libdir suffix
dnl ---------------------------------------------------------

libdir_suffix="lib"
AC_ARG_WITH(libdir-suffix, 
  AC_HELP_STRING([--with-libdir-suffix=suffix],
                 [Specify the default libdir suffix to use.
		 If you want libs to be searched for in PREFIX/lib64 use
		 --with-libdir-suffix=lib64]), 
  [libdir_suffix=$withval])

dnl ---------------------------------------------------------
dnl end libdir suffix
dnl ---------------------------------------------------------


dnl Find X Window System
AC_PATH_XTRA
saved_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $X_CFLAGS"
AC_CHECK_HEADER(X11/extensions/XShm.h, 
		[AC_DEFINE(HAVE_XSHM, 1, [X11 supports MIT-XShm])],,
		[#include <X11/Xlib.h>])
CPPFLAGS=$saved_CPPFLAGS
AC_CHECK_LIB(Xext, XShmQueryExtension, 
	     [XEXT_LIB=-lXext], 
	     [AC_MSG_ERROR(You need libXext)], 
	     [$X_LIBS -lX11 $X_EXTRA_LIBS])

AC_CHECK_LIB(Xmu, XSolarisGetVisualGamma, 
	     [AC_DEFINE([USE_SOLARIS_XMU], 1, [SolarisXmu present])
		XEXT_LIB="$XEXT_LIB -lXmu"
	   	],, 
	     [$X_LIBS -lX11 $X_EXTRA_LIBS])


dnl ---------------------------------------------------------
dnl Xvideo (Xv)
dnl ---------------------------------------------------------

use_xv=yes
AC_ARG_ENABLE(xv, 
  [  --disable-xv            disable the use of Xv ],
  [if test "x$enableval" != xyes; then
     use_xv=no
   fi])
if test "x$use_xv" = xyes; then
  saved_CPPFLAGS=$CPPFLAGS
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  AC_CHECK_HEADER(X11/extensions/Xv.h, xv_header=yes, xv_header=no)
  CPPFLAGS=$saved_CPPFLAGS
  AC_CHECK_LIB(Xv, XvQueryExtension, 
	       [ AC_DEFINE([HAVE_XV], 1, [X11 supports Xv])
		 XEXT_LIB="$XEXT_LIB -lXv"
		 BUILD_XV=1
	        ], 
	       [AC_MSG_WARN([You won't be able to use Xv])], 
	       [$X_LIBS -lX11 -lXext $X_EXTRA_LIBS])
fi
AC_SUBST(XEXT_LIB)

dnl ---------------------------------------------------------
dnl end Xvideo (Xv)
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl libjpeg
dnl ---------------------------------------------------------

jpeg_path=""
AC_ARG_WITH(libjpeg, 
  AC_HELP_STRING([--with-libjpeg=path],
                 [specify the install prefix to libjpeg]), 
  [if test "x$withval" = xno; then
     AC_MSG_ERROR([You must have/use libjpeg])
   fi
   if test "x$withval" != xyes; then
     jpeg_path=$withval
   fi])
if test -z "$jpeg_path"; then
  dnl We have nothing better to go on, guess that it's installed in prefix
  if test "x$prefix" != xNONE; then
    jpeg_path=$prefix
  else
    jpeg_path=$ac_default_prefix
  fi  
fi


dnl Both this and the libdvdread should first test and see if any flags
dnl beside -lname are needed. Then they the suggested path (+ some standard?)
jpeg_lib="$jpeg_path/$libdir_suffix"
jpeg_include="$jpeg_path/include"

TMPCFLAGS=$CFLAGS
CFLAGS="$CFLAGS -L$jpeg_lib"
AC_CHECK_LIB(jpeg, main, 
  [ JPEG_LIBS="-L$jpeg_lib -R$jpeg_lib -ljpeg"
    JPEG_CPPFLAGS=-I$jpeg_include
  ],
  [AC_MSG_WARN([Need libjpeg, install it and/or specify it's location])
    MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libjpeg, " ], 
  -L$jpeg_lib)

CFLAGS=$TMPCFLAGS

AC_ARG_WITH(libjpeg-includes, 
  AC_HELP_STRING([--with-libjpeg-includes=path],
                 [specify location of libjpeg headers]), 
  [JPEG_CPPFLAGS=-I$with_libjpeg_includes])

dnl if test x"$JPEG_CPPFLAGS" = x"-I/usr/local/include"; then
dnl  JPEG_CPPFLAGS=""
dnl fi
if test x"$JPEG_CPPFLAGS" = x"-I/usr/include"; then
  JPEG_CPPFLAGS=""
fi

saved_CPPFLAGS=$CPPFLAGS
dnl -w added to shutup GCC3.1's cpp warning about -I/usr/local
CPPFLAGS="-w $CPPFLAGS $JPEG_CPPFLAGS"
AC_CHECK_HEADER(jpeglib.h,, 
  [ AC_MSG_WARN([Can not find jpeglib.h, need the libjpeg headers])
    AC_MSG_WARN([Install the headers and/or specify their location])
    MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libjpeg headers, " 
  ])
CPPFLAGS=$saved_CPPFLAGS

AC_SUBST(JPEG_CPPFLAGS)
AC_SUBST(JPEG_LIBS)

dnl ---------------------------------------------------------
dnl end libjpeg
dnl ---------------------------------------------------------


dnl clock_gettime is in librt on Solaris
AC_CHECK_FUNC(clock_gettime, [ AC_DEFINE([HAVE_CLOCK_GETTIME], 1, [ ]) ], 
  AC_CHECK_LIB(rt, clock_gettime, 
    [ AC_DEFINE([HAVE_CLOCK_GETTIME], 1, [ ])
      LIBS="$LIBS -lrt"
    ]
  )
)

dnl nanosleep is in librt on Solaris
AC_CHECK_FUNC(nanosleep, , 
  AC_CHECK_LIB(rt, nanosleep, [ LIBS="$LIBS -lrt" ],
    AC_CHECK_LIB(posix4, nanosleep, [ LIBS="$LIBS -lposix4" ], 
      AC_MSG_ERROR(You need nanosleep)
    )
  )
)

dnl Should this also have some fallback library?
AC_CHECK_FUNCS(madvise)



dnl ---------------------------------------------------------
dnl posix shm
dnl ---------------------------------------------------------

dnl shm_open is in librt on Solaris, Linux
AC_CHECK_FUNC(shm_open, [ AC_DEFINE([HAVE_POSIX_SHM], 1, [ ]) ], 
  AC_CHECK_LIB(rt, shm_open, 
    [ AC_DEFINE([HAVE_POSIX_SHM], 1, [ ])
      LIBS="$LIBS -lrt"
    ]
  )
)
dnl define to 1 for default use of posix shm or 
dnl define to 0 for default not use posix shm
dnl This should be autoselected based on platform
dnl if there are any performance or other problems with
dnl posix shm.
dnl This can be overridden at runtime with the env var OGLE_USE_POSIX_SHM
AC_DEFINE([USE_POSIX_SHM], 1, [ ])

dnl ---------------------------------------------------------
dnl end posix shm
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl dvdread
dnl ---------------------------------------------------------

dvdread_path=""
AC_ARG_WITH(libdvdread, 
  AC_HELP_STRING([--with-libdvdread=path],
                 [specify the install prefix to libdvdread]), 
  [if test "x$with_libdvdread" = xno; then
     AC_MSG_ERROR([You must have/use libdvdread])
   fi
   if test "x$with_libdvdread" != xyes; then
     dvdread_path=$with_libdvdread
   fi])

if test -z "$dvdread_path"; then
  dnl We have nothing better to go on, guess that it's installed in prefix
  if test "x$prefix" != xNONE; then
    dvdread_path=$prefix
  else
    dvdread_path=$ac_default_prefix
  fi
fi

dvdread_lib="$dvdread_path/$libdir_suffix"
dvdread_include="$dvdread_path/include"

TMPCFLAGS=$CFLAGS
CFLAGS="$CFLAGS -L$dvdread_lib"
AC_CHECK_LIB(dvdread, DVDDiscID, 
  [ DVDREAD_LIBS="-L$dvdread_lib -R$dvdread_lib -ldvdread" 
    DVDREAD_CPPFLAGS=-I$dvdread_include
  ],
  [
    AC_CHECK_LIB(dvdread, DVDOpen, 
      [ AC_MSG_WARN([Upgrade libdvdread to 0.9.4 or later]) 
      MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libdvdread >= 0.9.4, " ],
      [ AC_MSG_WARN([Need libdvdread, install it or specify it's location])
      MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libdvdread, " ],
      -L$dvdread_lib)
  ], -L$dvdread_lib)

CFLAGS=$TMPCFLAGS

AC_ARG_WITH(libdvdread-includes, 
  AC_HELP_STRING([--with-libdvdread-includes=path],
              [specify location of libdvdread headers]), 
  [DVDREAD_CPPFLAGS=-I$with_libdvdread_includes])

dnl if test x"$DVDREAD_CPPFLAGS" = x"-I/usr/local/include"; then
dnl  DVDREAD_CPPFLAGS=""
dnl fi
if test x"$DVDREAD_CPPFLAGS" = x"-I/usr/include"; then
  DVDREAD_CPPFLAGS=""
fi

dnl Linux and Solaris needs this to prototype lseek64 and others
dnl Should really be taken from getconf...
DVDREAD_CPPFLAGS="-D_LARGEFILE64_SOURCE $DVDREAD_CPPFLAGS"

saved_CPPFLAGS=$CPPFLAGS
dnl -w added to shutup GCC3.1's cpp warning about -I/usr/local
CPPFLAGS="-w $CPPFLAGS $DVDREAD_CPPFLAGS"
AC_CHECK_HEADER(dvdread/dvd_reader.h,, 
  [ AC_MSG_WARN([Can not find dvd_reader.h, need the libdvdread headers])
    AC_MSG_WARN([Install the headers and/or specify their location])
    MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libdvdread headers, " 
  ])
CPPFLAGS=$saved_CPPFLAGS

AC_SUBST(DVDREAD_CPPFLAGS)
AC_SUBST(DVDREAD_ALIGN_CFLAGS)
AC_SUBST(DVDREAD_LIBS)

dnl ---------------------------------------------------------
dnl end dvdread
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl Sun MediaLib
dnl ---------------------------------------------------------

have_mlib=no
mlib_path="/opt/SUNWmlib"
AC_ARG_WITH(libmlib,
  AC_HELP_STRING([--with-libmlib=path],
                 [specify where mediaLib is installed]),
  [if test "x$with_libmlib" != xyes; then
     mlib_path=$with_libmlib
   fi])
if test "x$mlib_path" != xno; then
  saved_CPPFLAGS=$CFLAGS
  CFLAGS="$CFLAGS -L$mlib_path/lib"
  AC_CHECK_LIB(mlib, mlib_VideoDCT8x8_S16_S16, 
	       [ MLIB_LIBS="-L$mlib_path/lib -R$mlib_path/lib -lmlib"
                 MLIB_CPPFLAGS=-I$mlib_path/include
                 have_mlib=yes
               ])
  CFLAGS=$saved_CPPFLAGS
fi
if test "x$have_mlib" = xyes; then
  dnl if test x"$MLIB_CPPFLAGS" = x"-I/usr/local/include"; then
  dnl   MLIB_CPPFLAGS=""
  dnl fi
  if test x"$MLIB_CPPFLAGS" = x"-I/usr/include"; then
    MLIB_CPPFLAGS=""
  fi

  saved_CPPFLAGS=$CPPFLAGS
  dnl -w added to shutup GCC3.1's cpp warning about -I/usr/local
  CPPFLAGS="-w $CPPFLAGS $MLIB_CPPFLAGS"
  AC_CHECK_HEADER(mlib_types.h,, 
    [ AC_MSG_WARN([Can not find mlib_types.h, need the mediaLib headers])
      AC_MSG_ERROR([Install the headers and/or specify their location]) 
    ])
  CPPFLAGS=$saved_CPPFLAGS
fi


AC_SUBST(MLIB_CPPFLAGS)
AC_SUBST(MLIB_LIBS)
AM_CONDITIONAL(MLIB_LIBS, [test "x$have_mlib" = xyes])
if test "x$have_mlib" = xyes; then
  AC_DEFINE(HAVE_MLIB, 1, [Solaris MultiMedia Library installed])
  BUILD_MLIB=1
fi

dnl ---------------------------------------------------------
dnl end Sun MediaLib
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl liba52
dnl ---------------------------------------------------------

a52_path=""
AC_ARG_WITH(liba52, 
  AC_HELP_STRING([--with-liba52=path],
                 [specify the install prefix to liba52 (a52dec)]), 
  [if test "x$with_liba52" = xno; then
     AC_MSG_WARN([You must have/use a52dec])
   fi
   if test "x$with_liba52" != xyes; then
     a52_path=$with_liba52
   fi])
if test -z "$a52_path"; then
  dnl We have nothing better to go on, guess that it's installed in prefix
  if test "x$prefix" != xNONE; then
    a52_path=$prefix
  else
    a52_path=$ac_default_prefix
  fi
fi

a52_lib="$a52_path/$libdir_suffix"
a52_include="$a52_path/include"

TMPCFLAGS=$CFLAGS
CFLAGS="$CFLAGS -L$a52_lib"
dnl a52_free is a new function in 0.7.3
AC_CHECK_LIB(a52, a52_free, 
  [ 
    A52_LIBS="-L$a52_lib -R$a52_lib -la52" 
    A52_CPPFLAGS=-I$a52_include
  ],
  [
    if test "x$have_mlib" = xyes; then
      AC_CHECK_LIB(a52, a52_init, 
        [ AC_MSG_WARN([You have liba52 0.7.2 or earlier, need 0.7.3 or later])
	  MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}liba52 >= 0.7.3, " ],
	[ AC_MSG_WARN([Need liba52, install a52dec or specify it's location])
	  MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}liba52, " ],
	-L$a52_lib -L$mlib_path/lib -lmlib -lm)
    else
      AC_CHECK_LIB(a52, a52_init, 
        [ AC_MSG_WARN([You have liba52 0.7.2 or earlier, need 0.7.3 or later])
          MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}liba52 >= 0.7.3, " ],
        [ AC_MSG_WARN([Need liba52, install a52dec or specify it's location])
	  MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}liba52, " ],
	-L$a52_lib -lm)
    fi
  ], [-L$a52_lib -lm])

CFLAGS=$TMPCFLAGS

AC_ARG_WITH(liba52-includes, 
  AC_HELP_STRING([--with-liba52-includes=path],
                 [specify location of liba52 headers]), 
  [A52_CPPFLAGS=-I$with_liba52_includes])

dnl update to test for 0.7.2 / 0.7.3 MM_ACCEL_DJBFFT ?

dnl if test x"$A52_CPPFLAGS" = x"-I/usr/local/include"; then
dnl  A52_CPPFLAGS=""
dnl fi
if test x"$A52_CPPFLAGS" = x"-I/usr/include"; then
  A52_CPPFLAGS=""
fi

saved_CPPFLAGS=$CPPFLAGS
dnl -w added to shutup GCC3.1's cpp warning about -I/usr/local
CPPFLAGS="-w $CPPFLAGS $A52_CPPFLAGS"
AC_CHECK_HEADER(a52dec/a52.h,, 
    [ AC_MSG_WARN([Can not find a52dec/a52.h, need the liba52 headers])
      AC_MSG_WARN([Install a52dec(-dev) and/or specify it's location]) 
      MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}liba52 headers, " ])
CPPFLAGS=$saved_CPPFLAGS

AC_SUBST(A52_CPPFLAGS)
AC_SUBST(A52_LIBS)

dnl ---------------------------------------------------------
dnl end liba52
dnl ---------------------------------------------------------

dnl ---------------------------------------------------------
dnl libmad
dnl ---------------------------------------------------------

mad_path=""
AC_ARG_WITH(libmad, 
  AC_HELP_STRING([--with-libmad=path],
                 [specify the install prefix to libmad]), 
  [if test "x$with_libmad" = xno; then
     AC_MSG_WARN([You must have/use libmad])
   fi
   if test "x$with_libmad" != xyes; then
     mad_path=$with_libmad
   fi])
if test -z "$mad_path"; then
  dnl We have nothing better to go on, guess that it's installed in prefix
  if test "x$prefix" != xNONE; then
    mad_path=$prefix
  else
    mad_path=$ac_default_prefix
  fi
fi

mad_lib="$mad_path/$libdir_suffix"
mad_include="$mad_path/include"

TMPCFLAGS=$CFLAGS
CFLAGS="$CFLAGS -L$mad_lib"
AC_CHECK_LIB(mad, mad_frame_decode, 
  [ 
    MAD_LIBS="-L$mad_lib -R$mad_lib -lmad" 
    MAD_CPPFLAGS=-I$mad_include
  ],[AC_MSG_WARN([Need libmad, install it or specify it's location])
     MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libmad, " ],
    [-L$mad_lib])

CFLAGS=$TMPCFLAGS

AC_ARG_WITH(libmad-includes, 
  AC_HELP_STRING([--with-libmad-includes=path],
                 [specify location of libmad headers]), 
  [MAD_CPPFLAGS=-I$with_libmad_includes])

saved_CPPFLAGS=$CPPFLAGS
dnl -w added to shutup GCC3.1's cpp warning about -I/usr/local
CPPFLAGS="-w $CPPFLAGS $MAD_CPPFLAGS"
AC_CHECK_HEADER(mad.h,, 
    [ AC_MSG_WARN([Can not find mad.h, need the libmad headers])
      AC_MSG_WARN([Install libmad and/or specify it's location]) 
      MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libmad headers, " ])
CPPFLAGS=$saved_CPPFLAGS

AC_SUBST(MAD_CPPFLAGS)
AC_SUBST(MAD_LIBS)

dnl ---------------------------------------------------------
dnl end libmad
dnl ---------------------------------------------------------

dnl ---------------------------------------------------------
dnl our integrated audio library
dnl ---------------------------------------------------------

AC_DEFINE([LIBOGLEAO_NULL],,[libogleao null audio support])

dnl check for oss
AC_ARG_ENABLE([oss],
    [  --disable-oss           make a version not using oss])
if test "x$enable_oss" != xno; then
    case "$host" in
    *-linux*|*-openbsd*|*-freebsd*|*-bsdi*|*-darwin*)

dnl check for headers.. only define LIBOGLEAO_OSS if library and headers found.
        AC_DEFINE([LIBOGLEAO_OSS],,[libogleao OSS audio support])
	BUILD_AUDIO_OSS=1
        AC_CHECK_LIB([ossaudio],[_oss_ioctl],
            [LIBOGLEAO_LIBS="$LIBOGLEAO_LIBS -lossaudio"])
	DEFAULT_AUDIO_DRIVER="oss"
	DEFAULT_AUDIO_DEVICE="/dev/dsp"
    ;;
    *-solaris*|*-hpux*)
        AC_CHECK_LIB([OSSlib],[OSS_init],
            [LIBOGLEAO_LIBS="$LIBOGLEAO_LIBS -lOSSlib"
             AC_DEFINE([LIBOGLEAO_OSS],,[libogleao OSS audio support])
             BUILD_AUDIO_OSS=1
             DEFAULT_AUDIO_DRIVER="oss"
             DEFAULT_AUDIO_DEVICE="/dev/dsp"])
    ;;
    esac
fi

dnl check for openbsd audio 
AC_ARG_ENABLE([obsdaudio],
    [  --disable-obsdaudio     make a version not using OpenBSD audio])
if test "x$enable_obsdaudio" != xno; then
    case "$host" in
    *-openbsd* | *-netbsd* )

dnl only define LIBOGLEAO_OBSD headers found
dnl sys/audioio.h
        AC_DEFINE([LIBOGLEAO_OBSD],,[libogleao OpenBSD audio support])
	BUILD_AUDIO_OBSD=1
	DEFAULT_AUDIO_DRIVER="obsd"
	DEFAULT_AUDIO_DEVICE="/dev/audio"
    ;;
    esac
fi

dnl check for sunaudio
AC_ARG_ENABLE([sunaudio],
    [  --disable-sunaudio      make a version not using Sun audio])
if test "x$enable_sunaudio" != xno; then
    case "$host" in
    *-solaris*)

dnl check for headers.. only define LIBOGLEAO_SOLARIS if headers are found.
        AC_DEFINE([LIBOGLEAO_SOLARIS],,[libogleao solaris audio support])
	BUILD_AUDIO_SOLARIS=1
	DEFAULT_AUDIO_DRIVER="solaris"
	DEFAULT_AUDIO_DEVICE="/dev/audio"
    esac
fi

dnl check for ALSA
AC_ARG_ENABLE([alsa],
    [  --disable-alsa          make a version not using alsa])
if test "x$enable_alsa" != xno; then
    case "$host" in
    *-linux*)
        AC_MSG_CHECKING([for alsa version])
        AC_EGREP_CPP([AP_maGiC_VALUE],
          [ 
#include <sys/asoundlib.h>
#if defined(SND_LIB_MAJOR) && defined(SND_LIB_MINOR)
#if SND_LIB_MAJOR==0 && SND_LIB_MINOR<6
AP_maGiC_VALUE
#endif
#endif
          ],
          [
            have_alsa_05x=yes
            AC_MSG_RESULT([found 0.5.x])
	    AC_MSG_WARN([Disabling ALSA support, install a 0.9.x version])
          ],
          [
            AC_EGREP_CPP([AP_maGiC_VALUE],
              [
#include <sys/asoundlib.h>
#if defined(SND_LIB_MAJOR) && defined(SND_LIB_MINOR)
#if SND_LIB_MAJOR>0 || (SND_LIB_MAJOR==0 && SND_LIB_MINOR>=6)
AP_maGiC_VALUE
#endif
#endif
              ],
              [
                have_alsa_final=yes
                AC_MSG_RESULT([found latest])
              ],
	      [
		AC_MSG_RESULT([no])	
	      ])
          ])
        if test "x$have_alsa_final" = x"yes"; then
                    dnl which symbol should we check for? 
          AC_CHECK_LIB([asound],[main],
                       [ AC_DEFINE([LIBOGLEAO_ALSA],,
                                   [libogleao ALSA audio support])
			 LIBOGLEAO_LIBS="$LIBGLEAO_LIBS -lasound"
			 BUILD_AUDIO_ALSA=1
			 DEFAULT_AUDIO_DRIVER="alsa"
			 DEFAULT_AUDIO_DEVICE="/dev/dsp"
                       ])
        fi;;
    esac
fi

AC_SUBST([LIBOGLEAO_LIBS])

dnl ---------------------------------------------------------
dnl end included audio out
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl libxml
dnl ---------------------------------------------------------

AM_PATH_XML2(2.4.19, AC_DEFINE(HAVE_XML, 1, [libxml found]),
  [ AC_MSG_WARN([Install libxml2(-dev) and/or specify it's location])
  MANDATORY_MISSING_LIBS="${MANDATORY_MISSING_LIBS}libxml2 and/or headers, " ])

if test "x$XML_CPPFLAGS" = x; then
   XML_CPPFLAGS=$XML_CFLAGS
   AC_SUBST(XML_CPPFLAGS)
fi

dnl ---------------------------------------------------------
dnl end libxml
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl XF86VidMode
dnl ---------------------------------------------------------

use_xf86vidmode=yes
AC_ARG_ENABLE(xf86vidmode, 
  [  --disable-xf86vidmode	  disable the use of XF86VidMode ],
  [if test "x$enableval" != xyes; then
     use_xf86vidmode=no
   fi])
if test "x$use_xf86vidmode" = xyes; then
  saved_CPPFLAGS=$CPPFLAGS
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  AC_CHECK_HEADER([X11/extensions/xf86vmode.h], 
                  [xf86vidmode_header=yes], 
                  [xf86vidmode_header=no],
                  [#include <X11/Xlib.h>])
  CPPFLAGS=$saved_CPPFLAGS
  AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension, 
	       [ AC_DEFINE([HAVE_XF86VIDMODE], 1, [X11 supports XF86VidMode])
		 XF86VIDMODE_LIBS="-lXxf86vm"
	        ], 
	       [AC_MSG_WARN([You won't be able to use XF86VidMode])], 
	       [$X_LIBS -lX11 -lXext $X_EXTRA_LIBS])
fi
AC_SUBST(XF86VIDMODE_LIBS)

dnl ---------------------------------------------------------
dnl end XF86VidMode
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl Xinerama
dnl ---------------------------------------------------------

use_xinerama=yes
AC_ARG_ENABLE(xinerama, 
  [  --disable-xinerama	  disable the use of Xinerama ],
  [if test "x$enableval" != xyes; then
     use_xinerama=no
   fi])
if test "x$use_xinerama" = xyes; then
  saved_CPPFLAGS=$CPPFLAGS
  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  AC_CHECK_HEADER([X11/extensions/Xinerama.h], 
                  [xinerama_header=yes], 
                  [xinerama_header=no],
                  [#include <X11/Xlib.h>])
  CPPFLAGS=$saved_CPPFLAGS
  AC_CHECK_LIB(Xinerama, XineramaQueryExtension, 
	       [ AC_DEFINE([HAVE_XINERAMA], 1, [X11 supports Xinerama])
		 XINERAMA_LIBS="-lXinerama"
	        ], 
	       [AC_MSG_WARN([You won't be able to use Xinerama])], 
	       [$X_LIBS -lX11 -lXext $X_EXTRA_LIBS])
fi
AC_SUBST(XINERAMA_LIBS)

dnl ---------------------------------------------------------
dnl end Xinerama
dnl ---------------------------------------------------------

AC_CHECK_LIB(nsl, socket)
AC_CHECK_LIB(socket, socket)



dnl ---------------------------------------------------------
dnl config file
dnl ---------------------------------------------------------

if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(CONFIG_FILE, "${ac_default_prefix}/share/ogle/oglerc")
  CONFIG_FILE="${ac_default_prefix}/share/ogle/oglerc"
  CONFIG_FILE_DTD="${ac_default_prefix}/share/ogle/ogle_conf.dtd"
else
  AC_DEFINE_UNQUOTED(CONFIG_FILE, "${prefix}/share/ogle/oglerc")
  CONFIG_FILE="${prefix}/share/ogle/oglerc"
  CONFIG_FILE_DTD="${prefix}/share/ogle/ogle_conf.dtd"
fi

AC_SUBST(CONFIG_FILE)
AC_SUBST(CONFIG_FILE_DTD)

case $host_os in
solaris*)
	DEFAULT_DVD_DEVICE="/cdrom/cdrom0"
	;;
linux*)
	DEFAULT_DVD_DEVICE="/dev/dvd"
	;;
freebsd*)
	DEFAULT_DVD_DEVICE="/dev/acd0c"
	;;
netbsd*)
  	case "$host_cpu" in
   	i?86)
		DEFAULT_DVD_DEVICE="/dev/rcd0d"
		;;
   	*)
		DEFAULT_DVD_DEVICE="/dev/rcd0c"
		;;
  	esac
  	;;
openbsd*)
	DEFAULT_DVD_DEVICE="/dev/rcd0c"
	;;
bsdi*)
	DEFAULT_DVD_DEVICE="/dev/sr0c"
	;;
hpux*)
	DEFAULT_DVD_DEVICE="/dev/dvd"
	;;
*)
	DEFAULT_DVD_DEVICE=""
	;;
esac


AC_SUBST(DEFAULT_DVD_DEVICE)
AC_SUBST(DEFAULT_AUDIO_DEVICE)
AC_SUBST(DEFAULT_AUDIO_DRIVER)

dnl ---------------------------------------------------------
dnl end config file
dnl ---------------------------------------------------------




dnl ---------------------------------------------------------
dnl Compiler specific stuff
dnl ---------------------------------------------------------

if test "x$GCC" = xyes; then
  CFLAGS="$CFLAGS -Wall"
  GCC_VERSION=`$CC -v 2>&1 | grep version | awk '/^gcc version/ { print $3 }'`
  GCC_VERSION_MAJOR=`echo $GCC_VERSION | awk 'BEGIN { FS = "." } { print $1 }'`
  GCC_VERSION_MINOR=`echo $GCC_VERSION | awk 'BEGIN { FS = "." } { print $2 }'`
  GCC_VERSION_MICRO=`echo $GCC_VERSION | awk 'BEGIN { FS = "." } { print $3 }'`
else
    dnl non-GCC flags - we probably need exact configuration triplets here.
    case "$host" in
    sparc-sun-solaris*)
	O_CFLAGS="-xCC -fast"
	dnl The pragma pack(0) parts are not sticky, so we need to give this
	dnl 'noalign' flag to cc for parts that access the ifo and nav structs.
	DVDREAD_ALIGN_CFLAGS="-xmemalign"
    ;;
    alpha*)
        dnl Compaq cc
        O_CFLAGS="-fast"
    esac
fi

dnl ---------------------------------------------------------
dnl end Compiler specific stuff
dnl ---------------------------------------------------------


dnl ---------------------------------------------------------
dnl Architecture specific stuff
dnl ---------------------------------------------------------

USE_MMX=
USE_ALTIVEC=
USE_ALTIVEC_DARWIN=
USE_SPARCASM=
case "$host_cpu" in
i?86)
	if test "x$GCC" = xyes; then
	  O_CFLAGS="$O_CFLAGS -fomit-frame-pointer -funroll-loops"
dnl Do we need this ? should we hard code it to pentium/pentiumpro?
dnl what about k6 / athlon
dnl will it still assemble the mmx instructions when -march=i386
dnl	  CFLAGS="$CFLAGS -march=$host_cpu"

	  if ( test $GCC_VERSION_MAJOR -ge 4 ) || ( test $GCC_VERSION_MAJOR -eq 3 && test $GCC_VERSION_MINOR -ge 4 ); then
	     CPU_SCHED="-mtune"
	  else
	     CPU_SCHED="-mcpu"
	  fi
	  XCFLAGS="-march=i586 $CPU_SCHED=pentiumpro"
	fi
	echo "$XCFLAGS"
	USE_MMX=yes
	;;
x86_64)
        if test "x$GCC" = xyes; then
          O_CFLAGS="$O_CFLAGS -fomit-frame-pointer -funroll-loops"
          XCFLAGS=""
        fi
        USE_MMX=yes
        ;;
sparc)
	if test "x$GCC" = xyes; then
	  O_CFLAGS="$O_CFLAGS -mcpu=ultrasparc -mvis"
	  AC_DEFINE([USE_SPARCASM],1,[use assembler routines])
	  USE_SPARCASM=yes
	fi
	;;
powerpc|ppc)
	if test "x$GCC" = xyes; then
	  O_CFLAGS="$O_CFLAGS -fomit-frame-pointer -funroll-loops"

dnl On MacOS X with Apple's gcc3.3, -mcpu=7400 and -faltivec is used.
dnl We assume that no other version of gcc is used in darwin

dnl is the right? needed? use just -m7400 ? need new gcc for that..
dnl is there a -mcpu -march flag that we should use?
dnl should be a try compile on this line.. 

dnl What are correct options for altivec on other platforms/os/gcc versions?
	  case "$host_os" in
	  darwin*)
	  	XCFLAGS="-mcpu=7400 -faltivec -O3"
dnl Apples gcc3.3 only understands 'old' motorola-style altivec asm.
		USE_ALTIVEC_DARWIN=yes
		;;
	  *)
	  	XCFLAGS="-Wa,-m7400"
		;;
	  esac
dnl that sets USE_ALTIVEC depending on the success
	  USE_ALTIVEC=yes
	fi
        ;;
alphaev6|alphaev67|alphaev68|alphaev7)
	if test "x$GCC" = xyes; then
	  O_CFLAGS="$O_CFLAGS -mcpu=ev6"
        else  dnl Probably compaq cc
          O_CFLAGS="$O_CFLAGS -mcpu=ev6"
	fi
esac

AC_ARG_ENABLE(altivec, 
  [  --disable-altivec       disable the use of Altivec (G4+)],
  [if test "x$enableval" != xyes; then
    USE_ALTIVEC=
   fi])
if test "x$USE_ALTIVEC" = xyes; then
  AC_DEFINE([HAVE_ALTIVEC],1,[Processor support ALTIVEC])
  BUILD_ALTIVEC=1
  CFLAGS="$XCFLAGS $CFLAGS"
fi

AC_ARG_ENABLE(mmx, 
  [  --disable-mmx           disable the use of MMX (x86)],
  [if test "x$enableval" != xyes; then
     USE_MMX=
   fi])
if test "x$USE_MMX" = xyes; then
  AC_DEFINE([HAVE_MMX],1,[Processor support MMX])
  BUILD_MMX=1
  CFLAGS="$CFLAGS $XCFLAGS"
fi
GCCINFO=
if test "x$GCC" = xyes; then
   echo "int main(){return(0);}" > gcctest.c
   gcc $CFLAGS $CPPFLAGS -S -fverbose-asm -o gcctest.s gcctest.c
   GCCOPTLIST="gcc options: `grep '^#' gcctest.s`"
   rm -f gcctest.c gcctest.s
   for n in $GCCOPTLIST; do
     GCCINFO="${GCCINFO}${n} "
   done
   GCCINFO="`echo $GCCINFO | sed s/#/:/g`"
fi
echo "$GCCINFO"

BUILDINFO="`uname -m -r -s -v`"
BUILDINFO="${BUILDINFO} `uname -p` `date`"
BUILDINFO="${BUILDINFO}${BUILD_MMX:+ mmx}${BUILD_ALTIVEC:+ Altivec}"
BUILDINFO="${BUILDINFO}${BUILD_MLIB:+ mlib}${BUILD_XV:+ Xv}"
BUILDINFO="${BUILDINFO}${BUILD_AUDIO_OSS:+ oss}${BUILD_AUDIO_ALSA:+ alsa}"
BUILDINFO="${BUILDINFO}${BUILD_AUDIO_SOLARIS:+ solaris}${BUILD_AUDIO_OBSD:+ obsd}"

CCASFLAGS="$O_CFLAGS $CFLAGS"
ifdef([AM_PROG_AS],[AM_PROG_AS],[])

AC_SUBST(O_CFLAGS)
AC_SUBST(BUILDINFO)
AC_SUBST(GCCINFO)
AC_SUBST(USE_MMX)
AM_CONDITIONAL(USE_MMX, [test "x$USE_MMX" = xyes])
AC_SUBST(USE_ALTIVEC)
AM_CONDITIONAL(USE_ALTIVEC, [test "x$USE_ALTIVEC" = xyes])
AC_SUBST(USE_ALTIVEC_DARWIN)
AM_CONDITIONAL(USE_ALTIVEC_DARWIN, [test "x$USE_ALTIVEC" = xyes])
AC_SUBST(USE_SPARCASM)
AM_CONDITIONAL(USE_SPARCASM, [test "x$USE_SPARCASM" = xyes])


dnl ---------------------------------------------------------
dnl end Architecture specific stuff
dnl ---------------------------------------------------------

TOP_INCLUDES='-I$(top_srcdir) -I$(top_srcdir)/include'
AC_SUBST(TOP_INCLUDES)


AC_OUTPUT(Makefile 
ogle/Makefile 
include/Makefile 
common/Makefile 
ctrl/Makefile 
ac3/Makefile 
libogleao/Makefile 
mpeg2_video/Makefile 
vmg/Makefile 
mpeg2_program/Makefile 
scripts/Makefile
scripts/ogle
doc/Makefile
doc/man/Makefile
doc/man/oglerc.5
doc/man/ogle.1
dvd_cli/Makefile
oglerc)

echo "------------------------------------------------------"
echo "Going to build with the following configuration:"

if test "x$prefix" != xNONE; then
  echo "  prefix: $prefix"
else
  echo "  prefix: $ac_default_prefix"
fi  

echo "libdvdread CPPFLAGS: $DVDREAD_CPPFLAGS"
echo "libdvdread LIBS: $DVDREAD_LIBS"
echo "liba52 CPPFLAGS: $A52_CPPFLAGS"
echo "liba52 LIBS: $A52_LIBS"
echo "libmad CPPFLAGS: $MAD_CPPFLAGS"
echo "libmad LIBS: $MAD_LIBS"
echo "libjpeg CPPFLAGS: $JPEG_CPPFLAGS"
echo "libjpeg LIBS: $JPEG_LIBS"

echo "CFLAGS: $CFLAGS"
echo "O_CFLAGS: $O_CFLAGS"

echo ""

if test "x$BUILD_MMX" = x1; then
   echo "  mmx:           Yes"
else
   echo "  mmx:           No"
fi

if test "x$BUILD_ALTIVEC" = x1; then
   echo "  altivec:       Yes"
else
   echo "  altivec:       No"
fi

if test "x$BUILD_MLIB" = x1; then
   echo "  mlib:          Yes"
else
   echo "  mlib:          No"
fi

if test "x$BUILD_XV" = x1; then
   echo "  Xv:            Yes"
else
   echo "  Xv:            No"
fi

if test "x$BUILD_AUDIO_OSS" = x1; then
   echo "  oss audio:     Yes"
else
   echo "  oss audio:     No"
fi

if test "x$BUILD_AUDIO_ALSA" = x1; then
   echo "  alsa audio:    Yes"
else
   echo "  alsa audio:    No"
fi

if test "x$BUILD_AUDIO_SOLARIS" = x1; then
   echo "  solaris audio: Yes"
else
   echo "  solaris audio: No"
fi

if test "x$BUILD_AUDIO_OBSD" = x1; then
   echo "  obsd audio:    Yes"
else
   echo "  obsd audio:    No"
fi

if test "x$MANDATORY_MISSING_LIBS" != x; then
   AC_MSG_ERROR([
The following *mandatory* libraries/headers are *not* installed
or couldn't be located. See earlier output for more info.
Missing libs:
	$MANDATORY_MISSING_LIBS 
These libraries are needed to build ogle!
])
fi
